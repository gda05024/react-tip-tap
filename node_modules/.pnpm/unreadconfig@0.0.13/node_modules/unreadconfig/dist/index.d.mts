export { default as merge } from 'lodash.merge';
import { JITIOptions } from 'jiti/dist/types';
import { Options } from 'sucrase';

interface LoadConfOption {
    jiti?: boolean;
    jitiOptions?: JITIOptions;
    transformOption?: Options;
}
declare function loadConf<T>(path: string, option?: LoadConfOption): T;
declare const jsLoader: <T>(filepath: string, content: string, option?: LoadConfOption) => T;

declare function jsonLoader<T>(_: string, content: string): T;

declare function yamlLoader<T>(_: string, content: string): T;

declare function tomlLoader<T>(_: string, content: string): T;

declare function iniLoader<T>(_: string, content: string): T;

type LoaderFunc<T> = (filepath: string, content: string, jsOption?: LoadConfOption) => T;
type Loader<T> = Record<string, LoaderFunc<T>>;
interface ReadConfigOption<T> {
    searchPlaces?: string[];
    /** An object that maps extensions to the loader functions responsible for loading and parsing files with those extensions. */
    loaders?: Loader<T>;
    /** Specify default configuration. It has the lowest priority and is applied after extending config. */
    default?: T;
    /** Resolve configuration from this working directory. The default is `process.cwd()` */
    cwd?: string;
    /** Default transform js configuration */
    jsOption?: LoadConfOption;
    /** @deprecated use `mustExist` instead */
    ignoreLog?: boolean;
    mustExist?: boolean;
}
declare const getConfigPath: () => any;
/**
 * Find and load configuration from a `package.json` property, `rc` file, or `CommonJS` module.
 * @param namespace {string} Configuration base name. The default is `autoconf`.
 * @param option
 */
declare function readConfig<T>(namespace?: string, option?: ReadConfigOption<T>): any;

export { getConfigPath, iniLoader, jsLoader, jsonLoader, loadConf, readConfig, tomlLoader, yamlLoader };
