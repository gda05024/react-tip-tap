import $ from"node:fs";import j from"node:path";import y from"lodash.merge";export{default as merge}from"lodash.merge";import h from"jiti";import{parseJSON as E,getStaticJSONValue as N}from"jsonc-eslint-parser";import{parseYAML as F,getStaticYAMLValue as A}from"yaml-eslint-parser";import{parseTOML as M,getStaticTOMLValue as B}from"toml-eslint-parser";import T from"ini";import v from"path";import D from"fs";

// -- Unbuild CommonJS Shims --
import __cjs_url__ from 'url';
import __cjs_path__ from 'path';
import __cjs_mod__ from 'module';
const __filename = __cjs_url__.fileURLToPath(import.meta.url);
const __dirname = __cjs_path__.dirname(__filename);
const require = __cjs_mod__.createRequire(import.meta.url);
const V=()=>{switch(process.platform){case"win32":return"Windows";case"linux":return"Linux";case"darwin":return"Mac";default:return"UNKNOWN"}};function x(n=process.cwd(),r={}){const o=n.split("/"),t=h(n,{interopDefault:!0,esmResolve:!0,...r});return V()==="Windows"?t(`${o[o.length-1]}`):t(`./${o[o.length-1]}`)}function L(n,r={}){const{jiti:o=!0,jitiOptions:t}=r;let s=function(){try{return o?n?x(n,t):{}:n?require(n):{}}catch{return x(n,t)}}();return s.default??s}const f=(n,r,o={})=>L(n,o);function g(n,r){const o=E(r);return N(o)}function p(n,r){const o=F(r);return A(o)}function O(n,r){const o=M(r);return B(o)}function R(n,r){return T.parse(r)}function W(n,r,o=[]){const t=[...o,`.${n}rc`,`.${n}rc.json`,`.${n}rc.json5`,`.${n}rc.jsonc`,`.${n}rc.yaml`,`.${n}rc.yml`,`.${n}rc.toml`,`.${n}rc.ini`,`.${n}rc.js`,`.${n}rc.ts`,`.${n}rc.cjs`,`.${n}rc.mjs`,`.config/${n}rc`,`.config/${n}rc.json`,`.config/${n}rc.json5`,`.config/${n}rc.jsonc`,`.config/${n}rc.yaml`,`.config/${n}rc.yml`,`.config/${n}rc.toml`,`.config/${n}rc.ini`,`.config/${n}rc.js`,`.config/${n}rc.ts`,`.config/${n}rc.cjs`,`.config/${n}rc.mjs`,`${n}.config.js`,`${n}.config.ts`,`${n}.config.cjs`,`${n}.config.mjs`];for(const s of t){const a=v.resolve(r,s);if(D.existsSync(a))return a}return null}let e="";const J=()=>e;function P(n="autoconf",r={}){const{searchPlaces:o=[],default:t={},cwd:s=process.cwd(),ignoreLog:a=!1,mustExist:C=a||!1,jsOption:S}=r,u={".yml":p,".yaml":p,".ini":R,".toml":O,".json":g,".json5":g,".jsonc":g,".js":f,".ts":f,".cjs":f,".mjs":f,...r.loaders||{}},d=j.resolve(s,"package.json");e=W(n,s,o);let c="",i,l;try{if(e){const m=j.extname(e),w=j.basename(e);new RegExp(`^(.?${n}rc)$`).test(w)?(c=$.readFileSync(e,"utf-8"),l=u[".json"]):u[m]&&(c=$.readFileSync(e,"utf-8"),l=u[m])}else $.existsSync(d)&&(c=$.readFileSync(d,"utf-8"),i=u[".json"](e,c)[n]);if(c&&l&&(i=l(e,c,S),typeof i=="function"))return y(t,i,{default:i});if(C&&!e&&!i)return null;if(i)return y(t,i);console.log("READ_CONF:ERROR: \x1B[31;1mCan't find config file\x1B[0m")}catch(m){console.log(`READ_CONF:CATCH:ERROR: \x1B[31;1m${m}\x1B[0m`)}}export{J as getConfigPath,R as iniLoader,f as jsLoader,g as jsonLoader,L as loadConf,P as readConfig,O as tomlLoader,p as yamlLoader};
