/**
 *
 * React Alien Signals is a **TypeScript** library that provides hooks built on top of [Alien Signals](https://github.com/stackblitz/alien-signals).
 * It offers a seamless integration with React, ensuring concurrency-safe re-renders without tearing.
 *
 * @module reactjs-signal
 */
type TWritableSignal<T> = {
    (): T;
    (value: T): void;
};
/**
 * Creates a writable Alien Signal.
 *
 * @example
 * ```typescript
 * const countSignal = createSignal(0);
 * countSignal(10); // sets the value to 10
 * ```
 *
 * @template T - The type of the signal value.
 * @param {T} initialValue - The initial value of the signal.
 * @returns {TWritableSignal<T>} The created Alien Signal.
 */
declare function createSignal<T>(initialValue: T): TWritableSignal<T>;
/**
 * Creates a writable Alien Signal that persists its value in localStorage.
 *
 * @template T - The type of the signal value.
 * @param {string} key - The localStorage key to use for persistence.
 * @param {T} initialValue - The initial value of the signal.
 * @returns {TWritableSignal<T>} The created Alien Signal.
 */
declare function createSignalStorage<T>(key: string, initialValue: T): TWritableSignal<T>;
/**
 * Creates a computed Alien Signal based on a getter function.
 *
 * @example
 * ```typescript
 * const countSignal = createSignal(1);
 * const doubleSignal = createComputed(() => countSignal() * 2);
 * ```
 *
 * @template T - The type of the computed value.
 * @param {() => T} fn - A getter function returning a computed value.
 * @returns {ISignal<T>} The created computed signal.
 */
declare function createComputed<T>(fn: () => T): () => T;
/**
 * Creates a side effect in Alien Signals.
 *
 * @example
 * ```typescript
 * const countSignal = createSignal(1);
 * createEffect(() => {
 *   console.log('Count is', countSignal());
 * });
 * ```
 *
 * @template T - The type of the effect value.
 * @param {() => T} fn - A function that will run whenever its tracked signals update.
 * @returns {Effect<T>} The created effect object.
 */
declare function createEffect<T>(fn: () => T): () => void;
/**
 * React hook returning `[value, setValue]` for a given Alien Signal.
 * Uses useSyncExternalStore for concurrency-safe re-renders.
 *
 * @example
 * ```typescript
 * const countSignal = createSignal(0);
 * function Counter() {
 *   const [count, setCount] = useSignal(countSignal);
 *   return <button onClick={() => setCount(count + 1)}>{count}</button>;
 * }
 * ```
 *
 * @template T - The type of the signal value.
 * @param {TWritableSignal<T>} alienSignal - The signal to read/write.
 * @returns {[T, (val: T | ((oldVal: T) => T)) => void]} A tuple [currentValue, setValue].
 */
declare function useSignal<T>(alienSignal: TWritableSignal<T>): [T, (val: T | ((oldVal: T) => T)) => void];
/**
 * React hook returning only the current value of an Alien Signal (or computed).
 * No setter is provided.
 *
 * @example
 * ```typescript
 * const countSignal = createSignal(0);
 * const doubleSignal = createComputed(() => countSignal() * 2);
 * function Display() {
 *   const count = useSignalValue(countSignal);
 *   const double = useSignalValue(doubleSignal);
 *   return <div>{count}, {double}</div>;
 * }
 * ```
 *
 * @template T - The type of the signal value.
 * @param {TWritableSignal<T>} alienSignal - The signal to read.
 * @returns {T} The current value.
 */
declare function useSignalValue<T>(alienSignal: TWritableSignal<T>): T;
/**
 * React hook returning only a setter function for an Alien Signal.
 * No current value is provided, similar to Jotai's useSetAtom.
 *
 * @example
 * ```typescript
 * const countSignal = createSignal(0);
 * function Incrementor() {
 *   const setCount = useSetSignal(countSignal);
 *   return <button onClick={() => setCount((c) => c + 1)}>+1</button>;
 * }
 * ```
 *
 * @template T - The type of the signal value.
 * @param {TWritableSignal<T>} alienSignal - The signal to write.
 * @returns {(val: T | ((oldVal: T) => T)) => void} A setter function.
 */
declare function useSetSignal<T>(alienSignal: TWritableSignal<T>): (val: T | ((oldVal: T) => T)) => void;
/**
 * React hook for running a side effect whenever Alien Signals' dependencies
 * used in `fn` change. The effect is cleaned up on component unmount.
 *
 * @example
 * ```typescript
 * function Logger() {
 *   useSignalEffect(() => {
 *     console.log('Signal changed:', someSignal());
 *   });
 *   return null;
 * }
 * ```
 *
 * @param {() => void} fn - The effect function to run.
 */
declare function useSignalEffect(fn: () => void): void;
/**
 * React hook to initialize a signal with a value when hydrating from server.
 * @param alienSignal
 * @param value
 * @returns
 *
 * @template T - The type of the signal value.
 * @param {TWritableSignal<T>} alienSignal - The signal to hydrate.
 * @param {T} value - The value to hydrate the signal with.
 */
declare function useHydrateSignal<T>(alienSignal: TWritableSignal<T>, value: T): void;

export { type TWritableSignal, createComputed, createEffect, createSignal, createSignalStorage, useHydrateSignal, useSetSignal, useSignal, useSignalEffect, useSignalValue };
