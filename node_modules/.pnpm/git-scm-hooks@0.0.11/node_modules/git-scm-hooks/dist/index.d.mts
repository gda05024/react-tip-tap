declare const VALID_GIT_HOOKS: readonly ["applypatch-msg", "pre-applypatch", "post-applypatch", "pre-commit", "pre-merge-commit", "prepare-commit-msg", "commit-msg", "post-commit", "pre-rebase", "post-checkout", "post-merge", "pre-push", "pre-receive", "update", "proc-receive", "post-receive", "post-update", "reference-transaction", "push-to-checkout", "pre-auto-gc", "post-rewrite", "sendemail-validate", "fsmonitor-watchman", "p4-changelist", "p4-prepare-changelist", "p4-post-changelist", "p4-pre-submit", "post-index-change"];
type TGitHook = typeof VALID_GIT_HOOKS[number];
declare const defineConfig: (config: Partial<Record<TGitHook, any>>) => Partial<Record<"applypatch-msg" | "pre-applypatch" | "post-applypatch" | "pre-commit" | "pre-merge-commit" | "prepare-commit-msg" | "commit-msg" | "post-commit" | "pre-rebase" | "post-checkout" | "post-merge" | "pre-push" | "pre-receive" | "update" | "proc-receive" | "post-receive" | "post-update" | "reference-transaction" | "push-to-checkout" | "pre-auto-gc" | "post-rewrite" | "sendemail-validate" | "fsmonitor-watchman" | "p4-changelist" | "p4-prepare-changelist" | "p4-post-changelist" | "p4-pre-submit" | "post-index-change", any>>;
/**
 * Recursively gets the .git folder path from provided directory
 * @param {string} directory
 * @return {string | undefined} .git folder path or undefined if it was not found
 */
declare function getGitProjectRoot(directory?: string): any;
/**
 * Transforms the <project>/node_modules/git-hooks to <project>
 * @param projectPath - path to the git-hooks in node modules
 * @return {string | undefined} - an absolute path to the project or undefined if projectPath is not in node_modules
 */
declare function getProjectRootDirectoryFromNodeModules(projectPath: any): any;
/**
 * Checks the 'git-hooks' in dependencies of the project
 * @param {string} projectRootPath
 * @throws TypeError if packageJsonData not an object
 * @return {Boolean}
 */
declare function checkSimpleGitHooksInDependencies(projectRootPath: any): boolean;
/**
 * Parses the config and sets git hooks
 * @param {string} projectRootPath
 * @param {string[]} [argv]
 */
declare function setHooksFromConfig(projectRootPath?: string, argv?: string[]): void;
/**
 * Deletes all git hooks
 * @param {string} projectRoot
 */
declare function removeHooks(projectRoot?: string): void;

export { checkSimpleGitHooksInDependencies, defineConfig, getGitProjectRoot, getProjectRootDirectoryFromNodeModules, removeHooks, setHooksFromConfig };
