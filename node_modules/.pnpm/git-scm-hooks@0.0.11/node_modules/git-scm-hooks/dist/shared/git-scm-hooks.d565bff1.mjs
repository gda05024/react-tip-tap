import p from"node:fs";import c from"node:path";import w from"tty";import{readConfig as x}from"unreadconfig";function v(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var f={exports:{}};let O=w,C=!("NO_COLOR"in process.env||process.argv.includes("--no-color"))&&("FORCE_COLOR"in process.env||process.argv.includes("--color")||process.platform==="win32"||O.isatty(1)&&process.env.TERM!=="dumb"||"CI"in process.env),o=(t,e,r=t)=>n=>{let i=""+n,s=i.indexOf(e,t.length);return~s?t+h(i,e,r,s)+e:t+i+e},h=(t,e,r,n)=>{let i=t.substring(0,n)+r,s=t.substring(n+e.length),g=s.indexOf(e);return~g?i+h(s,e,r,g):i+s},d=(t=C)=>({isColorSupported:t,reset:t?e=>`\x1B[0m${e}\x1B[0m`:String,bold:t?o("\x1B[1m","\x1B[22m","\x1B[22m\x1B[1m"):String,dim:t?o("\x1B[2m","\x1B[22m","\x1B[22m\x1B[2m"):String,italic:t?o("\x1B[3m","\x1B[23m"):String,underline:t?o("\x1B[4m","\x1B[24m"):String,inverse:t?o("\x1B[7m","\x1B[27m"):String,hidden:t?o("\x1B[8m","\x1B[28m"):String,strikethrough:t?o("\x1B[9m","\x1B[29m"):String,black:t?o("\x1B[30m","\x1B[39m"):String,red:t?o("\x1B[31m","\x1B[39m"):String,green:t?o("\x1B[32m","\x1B[39m"):String,yellow:t?o("\x1B[33m","\x1B[39m"):String,blue:t?o("\x1B[34m","\x1B[39m"):String,magenta:t?o("\x1B[35m","\x1B[39m"):String,cyan:t?o("\x1B[36m","\x1B[39m"):String,white:t?o("\x1B[37m","\x1B[39m"):String,gray:t?o("\x1B[90m","\x1B[39m"):String,bgBlack:t?o("\x1B[40m","\x1B[49m"):String,bgRed:t?o("\x1B[41m","\x1B[49m"):String,bgGreen:t?o("\x1B[42m","\x1B[49m"):String,bgYellow:t?o("\x1B[43m","\x1B[49m"):String,bgBlue:t?o("\x1B[44m","\x1B[49m"):String,bgMagenta:t?o("\x1B[45m","\x1B[49m"):String,bgCyan:t?o("\x1B[46m","\x1B[49m"):String,bgWhite:t?o("\x1B[47m","\x1B[49m"):String});f.exports=d(),f.exports.createColors=d;var j=f.exports;const l=v(j),u=["applypatch-msg","pre-applypatch","post-applypatch","pre-commit","pre-merge-commit","prepare-commit-msg","commit-msg","post-commit","pre-rebase","post-checkout","post-merge","pre-push","pre-receive","update","proc-receive","post-receive","post-update","reference-transaction","push-to-checkout","pre-auto-gc","post-rewrite","sendemail-validate","fsmonitor-watchman","p4-changelist","p4-prepare-changelist","p4-post-changelist","p4-pre-submit","post-index-change"],E=["preserveUnused"],R=t=>t;function a(t=process.cwd()){let e=t;if(typeof e=="string"&&(e[e.length-1]!==c.sep&&(e+=c.sep),e=c.normalize(e),e=e.split(c.sep)),!e.length)return;e.pop();let r=e.join(c.sep),n=c.join(r,".git");if(p.existsSync(n)){if(!p.lstatSync(n).isDirectory()){let i=p.readFileSync(n,{encoding:"utf-8"}),s=/^gitdir: (.*)\s*$/.exec(i);if(s){let g=s[1],m=c.join(g,"commondir");return p.existsSync(m)?(m=p.readFileSync(m,"utf8").trim(),c.resolve(g,m)):c.normalize(g)}}return c.normalize(n)}else return a(e)}function F(t){function e(s,g){return JSON.stringify(s)===JSON.stringify(g)}const r=t.split(/[\\/]/),n=r.indexOf(".pnpm");if(n>-1)return r.slice(0,n-1).join("/");const i=r.indexOf(".store");if(i>-1)return r.slice(0,i-1).join("/");if(!(r.includes(".yarn")&&r.includes("unplugged"))&&r.length>2&&e(r.slice(r.length-2,r.length),["node_modules","git-hooks"]))return r.slice(0,r.length-2).join("/")}function N(t){if(typeof t!="string")throw TypeError("Package json path is not a string!");const{packageJsonContent:e}=y(t);return"dependencies"in e&&"git-hooks"in e.dependencies?(console.log(l.yellow("[WARN] You should move git-hooks to the devDependencies!")),!0):"devDependencies"in e?"git-hooks"in e.devDependencies:!1}function P(t=process.cwd(),e=process.argv){const r=J(e),n=S(t,r);if(!n)throw"[ERROR] Config was not found! Please add `git-hooks.config.ts` or `git-hooks.config.js` entry in package.json.\r\nCheck README for details";const i=Array.isArray(n.preserveUnused)?n.preserveUnused:n.preserveUnused?u:[];for(let s of u)Object.prototype.hasOwnProperty.call(n,s)?z(s,n[s],t):i.includes(s)||b(s,t)}function z(t,e,r=process.cwd()){const n=a(r);if(!n){console.log(l.green("[INFO] No `.git` root folder found, skipping"));return}const i=`#!/bin/sh
`+e,s=n+"/hooks/",g=c.normalize(s+t),m=c.normalize(s);p.existsSync(m)||p.mkdirSync(m),p.writeFileSync(g,i),p.chmodSync(g,493),console.log(l.green(`[INFO] Successfully set the ${t} with command: ${e}`))}function D(t=process.cwd()){for(let e of u)b(e,t)}function b(t,e=process.cwd()){const r=a(e),n=c.normalize(r+"/hooks/"+t);p.existsSync(n)&&p.unlinkSync(n)}function y(t=process.cwd()){if(typeof t!="string")throw TypeError("projectPath is not a string");const e=c.normalize(t+"/package.json");if(!p.statSync(e).isFile())throw Error("Package.json doesn't exist");const r=p.readFileSync(e);return{packageJsonContent:JSON.parse(r),packageJsonPath:e}}function J(t=[]){return t[2]||""}const _="git-hooks";function S(t,e=""){if(typeof t!="string")throw TypeError("Check project root path! Expected a string, but got "+typeof t);const r=[()=>x(_),()=>A(t)];e&&r.unshift(()=>x(e));for(let n of r){let i=n();if(i&&k(i))return i;if(i&&!k(i))throw"[ERROR] Config was not in correct format. Please check git hooks or options name"}}function A(t=process.cwd()){const{packageJsonContent:e}=y(t),r=e["git-hooks"];return typeof r=="string"?S(r):e["git-hooks"]}function k(t){for(let e in t)if(!u.includes(e)&&!E.includes(e))return!1;return!0}export{P as O,F as S,R as d,a as g,l as o,D as v,N as w};
