import { Buffer as Buffer$1 } from 'node:buffer';

declare function genSvgImage(x: number, y: number, size: number, radius: number, base64Image: string, imageFormat: ImageFormat): string;
declare function generateBadge(x: number, y: number, contributor: Contributor, preset: BadgePreset, radius: number, imageFormat: ImageFormat): Promise<string>;
declare class SvgComposer {
    readonly config: Required<any>;
    height: number;
    body: string;
    constructor(config: Required<any>);
    addSpan(height?: number): this;
    addTitle(text: string, classes?: string): this;
    addText(text: string, classes?: string): this;
    addRaw(svg: string): this;
    addSponsorLine(contributors: Contributor[], preset: BadgePreset): Promise<void>;
    addSponsorGrid(contributors: Contributor[], preset: BadgePreset): Promise<this>;
    generateSvg(): string;
}

interface Contributor {
    login: string;
    id: number;
    node_id: string;
    avatar_url: string;
    gravatar_id: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: 'User' | 'Organization';
    site_admin: boolean;
    contributions: number;
    avatarBuffer?: Buffer$1;
}
declare const outputFormats: readonly ["svg", "png", "webp", "json"];
type OutputFormat = typeof outputFormats[number];
type ImageFormat = 'png' | 'webp';
interface Contributorkit {
    owner: string;
    repo: string;
    width?: number;
    outputDir?: string;
    cacheFile?: string;
    tiers?: Tier[];
    formats?: OutputFormat[];
    name?: string;
    svgInlineCSS?: string;
    /**
     * Url to fallback avatar.
     * Setting false to disable fallback avatar.
     */
    fallbackAvatar?: string | false | Buffer$1 | Promise<Buffer$1>;
    /**
     * Configs for multiple renders
     */
    renders?: ContributorkitRenderOptions[];
    /**
     * Configs for render
     */
    renderer?: 'tiers' | 'circles';
    /**
     * Padding of image container
     */
    padding?: {
        top?: number;
        bottom?: number;
    };
}
interface BadgePreset {
    boxWidth: number;
    boxHeight: number;
    avatar: {
        size: number;
        classes?: string;
    };
    name?: false | {
        color?: string;
        classes?: string;
        maxLength?: number;
    };
    container?: {
        sidePadding?: number;
    };
    classes?: string;
}
interface TierPartition {
    contribution: number;
    contributions: Contributor[];
    tier: Tier;
}
interface Tier {
    /**
     * The lower bound of the tier (inclusive)
     */
    contribution?: number;
    title?: string;
    preset?: BadgePreset;
    padding?: {
        top?: number;
        bottom?: number;
    };
}
interface CircleRenderOptions {
    /**
     * Min radius for sponsors
     *
     * @default 10
     */
    radiusMin?: number;
    /**
     * Max radius for sponsors
     *
     * @default 300
     */
    radiusMax?: number;
    /**
     * Radius for past sponsors
     *
     * @default 5
     */
    radiusPast?: number;
    /**
     * Custom function to calculate the weight of the sponsor.
     *
     * When provided, `radiusMin`, `radiusMax` and `radiusPast` will be ignored.
     */
    weightInterop?: (contributor: any, maxAmount: number) => number;
}
interface ContributorkitRenderOptions {
    /**
     * Name of exported files
     *
     * @default 'contributor'
     */
    name?: string;
    /**
     * Renderer to use
     *
     * @default 'tiers'
     */
    renderer?: 'tiers' | 'circles';
    /**
     * Output formats
     *
     * @default ['json', 'svg', 'png']
     */
    formats?: OutputFormat[];
    /**
     * Compose the SVG
     */
    customComposer?: (composer: SvgComposer, contributors: Contributor[], config: Contributorkit) => PromiseLike<void> | void;
    /**
     * Filter of sponsorships to render in the final image.
     */
    /**
     * Tiers
     *
     * Only effective when using `tiers` renderer.
     */
    tiers?: Tier[];
    /**
     * Options for rendering circles
     *
     * Only effective when using `circles` renderer.
     */
    circles?: CircleRenderOptions;
    /**
     * Width of the image.
     *
     * @default 800
     */
    width?: number;
    /**
     * Padding of image container
     */
    padding?: {
        top?: number;
        bottom?: number;
    };
    /**
     * Inline CSS of generated SVG
     */
    svgInlineCSS?: string;
    /**
     * Whether to display the private sponsors
     *
     * @default false
     */
    includePrivate?: boolean;
    /**
     * Whether to display the past sponsors
     * Currently only works with GitHub provider
     *
     * @default auto detect based on tiers
     */
    includePastSponsors?: boolean;
    /**
     * Hook to modify sponsors data before rendering.
     */
    /**
     * Hook to get or modify the SVG before writing.
     */
    onSvgGenerated?: (svg: string) => PromiseLike<string | void | undefined | null> | string | void | undefined | null;
    /**
     * Format of embedded images
     *
     * @default 'webp'
     */
    imageFormat?: ImageFormat;
}
interface ContributorkitRenderer {
    name: string;
    renderSVG: (config: Required<ContributorkitRenderOptions>, contributors: Contributor[]) => Promise<string>;
}

declare function resolveAvatars(contributors: Contributor[]): Promise<void[]>;
declare function resizeImage(image: Buffer$1, size: number | undefined, format: ImageFormat): Promise<Buffer$1 | undefined>;
declare function svgToPng(svg: string): Promise<Buffer$1>;
declare function svgToWebp(svg: string): Promise<Buffer$1>;

declare const tierPresets: {
    none: BadgePreset;
    xs: BadgePreset;
    small: BadgePreset;
    base: BadgePreset;
    medium: BadgePreset;
    large: BadgePreset;
    xl: BadgePreset;
};
/**
 * @deprecated Use `tierPresets` instead
 */
declare const presets: {
    none: BadgePreset;
    xs: BadgePreset;
    small: BadgePreset;
    base: BadgePreset;
    medium: BadgePreset;
    large: BadgePreset;
    xl: BadgePreset;
};

declare const FALLBACK_AVATAR: Promise<Buffer>;

declare const defaultTiers: Tier[];
declare const defaultInlineCSS = "\ntext {\n  font-weight: 300;\n  font-size: 14px;\n  fill: #777777;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n}\n.contributorkit-link {\n  cursor: pointer;\n}\n.contributorkit-tier-title {\n  font-weight: 500;\n  font-size: 20px;\n}\n";
declare const defaultConfig: Partial<Contributorkit>;

declare function defineConfig(config: Contributorkit): Contributorkit;
declare function loadConfig(inlineConfig?: Contributorkit): Promise<Required<Contributorkit>>;

export { type BadgePreset, type CircleRenderOptions, type Contributor, type Contributorkit, type ContributorkitRenderOptions, type ContributorkitRenderer, FALLBACK_AVATAR, type ImageFormat, type OutputFormat, SvgComposer, type Tier, type TierPartition, defaultConfig, defaultInlineCSS, defaultTiers, defineConfig, genSvgImage, generateBadge, loadConfig, outputFormats, presets, resizeImage, resolveAvatars, svgToPng, svgToWebp, tierPresets };
