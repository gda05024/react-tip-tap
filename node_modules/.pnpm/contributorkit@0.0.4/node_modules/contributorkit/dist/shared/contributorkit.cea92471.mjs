import { Buffer } from 'node:buffer';
import { $fetch } from 'ofetch';
import sharp from 'sharp';
import { loadConfig as loadConfig$1 } from 'unconfig';

const outputFormats = ["svg", "png", "webp", "json"];

const version = "0.0.4";

async function fetchImage(url) {
  const arrayBuffer = await $fetch(url, {
    responseType: "arrayBuffer",
    headers: {
      "User-Agent": `Mozilla/5.0 Chrome/124.0.0.0 Safari/537.36 Contributorkit/${version}`
    }
  });
  return Buffer.from(arrayBuffer);
}
async function resolveAvatars(contributors) {
  const pLimit = await import('p-limit').then((r) => r.default);
  const limit = pLimit(15);
  return Promise.all(contributors.map((ship) => limit(async () => {
    const pngBuffer = await fetchImage(ship.avatar_url).catch((e) => {
      throw e;
    });
    if (pngBuffer) {
      ship.avatarBuffer = await resizeImage(pngBuffer, 120, "webp");
    }
  })));
}
const cache = /* @__PURE__ */ new Map();
async function resizeImage(image, size = 100, format) {
  try {
    const cacheKey = `${size}:${format}`;
    if (cache.has(image)) {
      const cacheHit = cache.get(image).get(cacheKey);
      if (cacheHit)
        return cacheHit;
    }
    if (image) {
      let processing = sharp(image).resize(size, size, { fit: sharp.fit.cover });
      processing = format === "webp" ? processing.webp() : processing.png({ quality: 80, compressionLevel: 8 });
      const result = await processing.toBuffer();
      if (!cache.has(image))
        cache.set(image, /* @__PURE__ */ new Map());
      cache.get(image).set(cacheKey, result);
      return result;
    }
  } catch (error) {
    console.log("resizeImage error", error);
  }
}
function svgToPng(svg) {
  return sharp(Buffer.from(svg), { density: 150 }).png({ quality: 90 }).toBuffer();
}
function svgToWebp(svg) {
  return sharp(Buffer.from(svg), { density: 150 }).webp().toBuffer();
}

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
let id = 0;
function genSvgImage(x, y, size, radius, base64Image, imageFormat) {
  const cropId = `c${id++}`;
  return `
  <clipPath id="${cropId}">
    <rect x="${x}" y="${y}" width="${size}" height="${size}" rx="${size * radius}" ry="${size * radius}" />
  </clipPath>
  <image x="${x}" y="${y}" width="${size}" height="${size}" href="data:image/${imageFormat};base64,${base64Image}" clip-path="url(#${cropId})"/>`;
}
async function generateBadge(x, y, contributor, preset, radius, imageFormat) {
  const { login } = contributor;
  let name = contributor.login.trim();
  const url = contributor.html_url;
  if (preset.name && preset.name.maxLength && name.length > preset.name.maxLength) {
    if (name.includes(" "))
      name = name.split(" ")[0];
    else
      name = `${name.slice(0, preset.name.maxLength - 3)}...`;
  }
  const { size } = preset.avatar;
  let avatar = contributor.avatarBuffer;
  if (size < 50)
    avatar = await resizeImage(avatar, 50, imageFormat);
  else if (size < 80)
    avatar = await resizeImage(avatar, 80, imageFormat);
  else if (imageFormat === "png")
    avatar = await resizeImage(avatar, 120, imageFormat);
  const avatarBase64 = avatar.toString("base64");
  return `<a ${url ? `href="${url}" ` : ""}class="${preset.classes || "contributorkit-link"}" target="_blank" id="${login}">
  ${preset.name ? `<text x="${x + size / 2}" y="${y + size + 18}" text-anchor="middle" class="${preset.name.classes || "contributorkit-name"}" fill="${preset.name.color || "currentColor"}">${encodeHtmlEntities(name)}</text>
  ` : ""}${await genSvgImage(x, y, size, radius, avatarBase64, imageFormat)}
</a>`.trim();
}
class SvgComposer {
  constructor(config) {
    this.config = config;
    __publicField(this, "height", 0);
    __publicField(this, "body", "");
  }
  addSpan(height = 0) {
    this.height += height;
    return this;
  }
  addTitle(text, classes = "contributorkit-tier-title") {
    return this.addText(text, classes);
  }
  addText(text, classes = "text") {
    this.body += `<text x="${this.config.width / 2}" y="${this.height}" text-anchor="middle" class="${classes}">${text}</text>`;
    this.height += 20;
    return this;
  }
  addRaw(svg) {
    this.body += svg;
    return this;
  }
  async addSponsorLine(contributors, preset) {
    const offsetX = (this.config.width - contributors.length * preset.boxWidth) / 2 + (preset.boxWidth - preset.avatar.size) / 2;
    const r = await Promise.all(contributors.map(async (s, i) => {
      const x = offsetX + preset.boxWidth * i;
      const y = this.height;
      const radius = 0.5;
      return generateBadge(x, y, s, preset, radius, this.config.imageFormat);
    }));
    this.body += r.join("\n");
    this.height += preset.boxHeight;
  }
  async addSponsorGrid(contributors, preset) {
    const perLine = Math.floor((this.config.width - (preset.container?.sidePadding || 0) * 2) / preset.boxWidth);
    const arr = Array.from({ length: Math.ceil(contributors.length / perLine) });
    for (let i = 0; i < arr.length; i++) {
      await this.addSponsorLine(contributors.slice(i * perLine, (i + 1) * perLine), preset);
    }
    return this;
  }
  generateSvg() {
    return `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 ${this.config.width} ${this.height}" width="${this.config.width}" height="${this.height}">
<!-- Generated by https://github.com/hunghg255/contributorkit -->
<style>${this.config.svgInlineCSS}</style>
${this.body}
</svg>
`;
  }
}
function encodeHtmlEntities(str) {
  return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}

const fallback = `
<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 135.47 135.47">
    <path fill="#2d333b" stroke="#000" stroke-linejoin="round" stroke-width=".32" d="M.16.16h135.15v135.15H.16z" paint-order="stroke markers fill"/>
    <path fill="#636e7b" fill-rule="evenodd" d="M81.85 53.56a14.13 14.13 0 1 1-28.25 0 14.13 14.13 0 0 1 28.25 0zm.35 17.36a22.6 22.6 0 1 0-28.95 0 33.92 33.92 0 0 0-19.38 29.05 4.24 4.24 0 0 0 8.46.4 25.43 25.43 0 0 1 50.8 0 4.24 4.24 0 1 0 8.46-.4 33.93 33.93 0 0 0-19.4-29.05z"/>
</svg>
`;
const FALLBACK_AVATAR = svgToPng(fallback);

const none = {
  avatar: {
    size: 0
  },
  boxWidth: 0,
  boxHeight: 0,
  container: {
    sidePadding: 0
  }
};
const base = {
  avatar: {
    size: 40
  },
  boxWidth: 48,
  boxHeight: 48,
  container: {
    sidePadding: 30
  }
};
const xs = {
  avatar: {
    size: 25
  },
  boxWidth: 30,
  boxHeight: 30,
  container: {
    sidePadding: 30
  }
};
const small = {
  avatar: {
    size: 35
  },
  boxWidth: 38,
  boxHeight: 38,
  container: {
    sidePadding: 30
  }
};
const medium = {
  avatar: {
    size: 50
  },
  boxWidth: 80,
  boxHeight: 90,
  container: {
    sidePadding: 20
  },
  name: {
    maxLength: 10
  }
};
const large = {
  avatar: {
    size: 70
  },
  boxWidth: 95,
  boxHeight: 115,
  container: {
    sidePadding: 20
  },
  name: {
    maxLength: 16
  }
};
const xl = {
  avatar: {
    size: 90
  },
  boxWidth: 120,
  boxHeight: 130,
  container: {
    sidePadding: 20
  },
  name: {
    maxLength: 20
  }
};
const tierPresets = {
  none,
  xs,
  small,
  base,
  medium,
  large,
  xl
};
const presets = tierPresets;

const defaultTiers = [
  {
    title: "Commit",
    contribution: 1,
    preset: tierPresets.base
  },
  {
    title: "Over 10 Commit",
    contribution: 10,
    preset: tierPresets.medium
  },
  {
    title: "Over 100 Commit",
    contribution: 100,
    preset: tierPresets.large
  },
  {
    title: "Over 200 Commit",
    contribution: 200,
    preset: tierPresets.xl
  }
];
const defaultInlineCSS = `
text {
  font-weight: 300;
  font-size: 14px;
  fill: #777777;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}
.contributorkit-link {
  cursor: pointer;
}
.contributorkit-tier-title {
  font-weight: 500;
  font-size: 20px;
}
`;
const defaultConfig = {
  width: 800,
  outputDir: "./contributorkit",
  cacheFile: ".cache.json",
  formats: ["svg", "png"],
  tiers: defaultTiers,
  name: "contributors",
  svgInlineCSS: defaultInlineCSS
};

function defineConfig(config) {
  return config;
}
async function loadConfig(inlineConfig = {}) {
  const { config = {} } = await loadConfig$1({
    sources: [
      {
        files: "contributor.config"
      },
      {
        files: "contributorkit.config"
      }
    ],
    merge: true
  });
  const resolved = {
    fallbackAvatar: FALLBACK_AVATAR,
    ...defaultConfig,
    ...config,
    ...inlineConfig
  };
  return resolved;
}

export { FALLBACK_AVATAR as F, SvgComposer as S, svgToWebp as a, genSvgImage as b, resizeImage as c, defineConfig as d, defaultTiers as e, defaultInlineCSS as f, generateBadge as g, defaultConfig as h, loadConfig as l, outputFormats as o, presets as p, resolveAvatars as r, svgToPng as s, tierPresets as t, version as v };
