#!/usr/bin/env node
"use strict";const o=require("node:fs"),r=require("node:path"),require$$0=require("tty");function _interopDefaultCompat(s){return s&&typeof s=="object"&&"default"in s?s.default:s}const o__default=_interopDefaultCompat(o),r__default=_interopDefaultCompat(r),require$$0__default=_interopDefaultCompat(require$$0);function getDefaultExportFromCjs(s){return s&&s.__esModule&&Object.prototype.hasOwnProperty.call(s,"default")?s.default:s}var picocolors={exports:{}};let tty=require$$0__default,isColorSupported=!("NO_COLOR"in process.env||process.argv.includes("--no-color"))&&("FORCE_COLOR"in process.env||process.argv.includes("--color")||process.platform==="win32"||tty.isatty(1)&&process.env.TERM!=="dumb"||"CI"in process.env),formatter=(s,n,c=s)=>b=>{let x=""+b,g=x.indexOf(n,s.length);return~g?s+replaceClose(x,n,c,g)+n:s+x+n},replaceClose=(s,n,c,b)=>{let x=s.substring(0,b)+c,g=s.substring(b+n.length),u=g.indexOf(n);return~u?x+replaceClose(g,n,c,u):x+g},createColors=(s=isColorSupported)=>({isColorSupported:s,reset:s?n=>`\x1B[0m${n}\x1B[0m`:String,bold:s?formatter("\x1B[1m","\x1B[22m","\x1B[22m\x1B[1m"):String,dim:s?formatter("\x1B[2m","\x1B[22m","\x1B[22m\x1B[2m"):String,italic:s?formatter("\x1B[3m","\x1B[23m"):String,underline:s?formatter("\x1B[4m","\x1B[24m"):String,inverse:s?formatter("\x1B[7m","\x1B[27m"):String,hidden:s?formatter("\x1B[8m","\x1B[28m"):String,strikethrough:s?formatter("\x1B[9m","\x1B[29m"):String,black:s?formatter("\x1B[30m","\x1B[39m"):String,red:s?formatter("\x1B[31m","\x1B[39m"):String,green:s?formatter("\x1B[32m","\x1B[39m"):String,yellow:s?formatter("\x1B[33m","\x1B[39m"):String,blue:s?formatter("\x1B[34m","\x1B[39m"):String,magenta:s?formatter("\x1B[35m","\x1B[39m"):String,cyan:s?formatter("\x1B[36m","\x1B[39m"):String,white:s?formatter("\x1B[37m","\x1B[39m"):String,gray:s?formatter("\x1B[90m","\x1B[39m"):String,bgBlack:s?formatter("\x1B[40m","\x1B[49m"):String,bgRed:s?formatter("\x1B[41m","\x1B[49m"):String,bgGreen:s?formatter("\x1B[42m","\x1B[49m"):String,bgYellow:s?formatter("\x1B[43m","\x1B[49m"):String,bgBlue:s?formatter("\x1B[44m","\x1B[49m"):String,bgMagenta:s?formatter("\x1B[45m","\x1B[49m"):String,bgCyan:s?formatter("\x1B[46m","\x1B[49m"):String,bgWhite:s?formatter("\x1B[47m","\x1B[49m"):String});picocolors.exports=createColors(),picocolors.exports.createColors=createColors;var picocolorsExports=picocolors.exports;const e=getDefaultExportFromCjs(picocolorsExports),t=r__default.resolve(".git/COMMIT_EDITMSG"),i=o__default.readFileSync(t,"utf-8").trim(),m=/^((feat|fix|docs|style|core|i18n|a11y|report|misc|cli|audits|improve|security|deprecated|refactor|perf|test|workflow|build|ci|chore|types|wip|release|deps?|merge|examples?|revert)(\(.+\))?(\:|\!\:)|(Merge|Revert|Version)) .{1,200}$/;m.test(i)||(console.error(`${e.red("ERROR: invalid commit message format.")}

`+e.yellow(`  Proper commit message format is required for automated changelog generation. Examples:

`)+`    ${e.green("feat(compiler): add 'comments' option")}
    ${e.green("fix(modal): handle events on blur (close #28)")}

`+e.yellow(`  See .github/commit-convention.md for more details.
`)),process.exit(1));
